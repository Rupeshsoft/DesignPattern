Singleton Design Pattern ::
================================
1. Singleton Design pattern is going to create Single Instance of Class.
2. It is having instance initially as null which can be of type  
private static Singleton instance = null
3. Its constructor is private
4. its instance creation method is public not private.
5. Check code for it in main.java file save same file as Main.java while running.

Errors : 
   1.  cannot find symbol  .. catch(NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e ) 

Solution :

import java.lang.reflect.InvocationTargetException;

============================================================


Breaking Singleton
===================

Here , we can break with Reflection API which is imported from java.lang.reflect.Construct and can create multple objects and show its unique hashcode with object.hashCode();


Singleton with Exception e  as main Exception Handling class you can use rather than using other exception classes like 
NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e

example : 

catch(Exception e ){
            e.printStackTrace();
        }


